# Alternative GNU Make workspace makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

ifeq ($(config),debug)
  glfw_config = debug
  glad_config = debug
  imgui_config = debug
  spdlog_config = debug
  pfd_config = debug
  stb_image_config = debug
  cryptopp_config = debug
  cxxopts_config = debug
  inih_config = debug
  json_config = debug
  sqlitecpp_config = debug
  tabulate_config = debug
  infoware_config = debug
  curl_config = debug
  cpr_config = debug
  mbedtls_config = debug
  zlib_config = debug
  catch2_config = debug
  Enigma_config = debug

else ifeq ($(config),release)
  glfw_config = release
  glad_config = release
  imgui_config = release
  spdlog_config = release
  pfd_config = release
  stb_image_config = release
  cryptopp_config = release
  cxxopts_config = release
  inih_config = release
  json_config = release
  sqlitecpp_config = release
  tabulate_config = release
  infoware_config = release
  curl_config = release
  cpr_config = release
  mbedtls_config = release
  zlib_config = release
  catch2_config = release
  Enigma_config = release

else ifeq ($(config),dist)
  glfw_config = dist
  glad_config = dist
  imgui_config = dist
  spdlog_config = dist
  pfd_config = dist
  stb_image_config = dist
  cryptopp_config = dist
  cxxopts_config = dist
  inih_config = dist
  json_config = dist
  sqlitecpp_config = dist
  tabulate_config = dist
  infoware_config = dist
  curl_config = dist
  cpr_config = dist
  mbedtls_config = dist
  zlib_config = dist
  catch2_config = dist
  Enigma_config = dist

else
  $(error "invalid configuration $(config)")
endif

PROJECTS := glfw glad imgui spdlog pfd stb_image cryptopp cxxopts inih json sqlitecpp tabulate infoware curl cpr mbedtls zlib catch2 Enigma

.PHONY: all clean help $(PROJECTS) Dependencies

all: $(PROJECTS)

Dependencies: catch2 cpr cryptopp curl cxxopts glad glfw imgui infoware inih json mbedtls pfd spdlog sqlitecpp stb_image tabulate zlib

glfw:
ifneq (,$(glfw_config))
	@echo "==== Building glfw ($(glfw_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/glfw -f Makefile config=$(glfw_config)
endif

glad:
ifneq (,$(glad_config))
	@echo "==== Building glad ($(glad_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/glad -f Makefile config=$(glad_config)
endif

imgui:
ifneq (,$(imgui_config))
	@echo "==== Building imgui ($(imgui_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/imgui -f Makefile config=$(imgui_config)
endif

spdlog:
ifneq (,$(spdlog_config))
	@echo "==== Building spdlog ($(spdlog_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/spdlog -f Makefile config=$(spdlog_config)
endif

pfd:
ifneq (,$(pfd_config))
	@echo "==== Building pfd ($(pfd_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/pfd -f Makefile config=$(pfd_config)
endif

stb_image:
ifneq (,$(stb_image_config))
	@echo "==== Building stb_image ($(stb_image_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/stb_image -f Makefile config=$(stb_image_config)
endif

cryptopp:
ifneq (,$(cryptopp_config))
	@echo "==== Building cryptopp ($(cryptopp_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/cryptopp -f Makefile config=$(cryptopp_config)
endif

cxxopts:
ifneq (,$(cxxopts_config))
	@echo "==== Building cxxopts ($(cxxopts_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/cxxopts -f Makefile config=$(cxxopts_config)
endif

inih:
ifneq (,$(inih_config))
	@echo "==== Building inih ($(inih_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/inih -f Makefile config=$(inih_config)
endif

json:
ifneq (,$(json_config))
	@echo "==== Building json ($(json_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/json -f Makefile config=$(json_config)
endif

sqlitecpp:
ifneq (,$(sqlitecpp_config))
	@echo "==== Building sqlitecpp ($(sqlitecpp_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/sqlitecpp -f Makefile config=$(sqlitecpp_config)
endif

tabulate:
ifneq (,$(tabulate_config))
	@echo "==== Building tabulate ($(tabulate_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/tabulate -f Makefile config=$(tabulate_config)
endif

infoware:
ifneq (,$(infoware_config))
	@echo "==== Building infoware ($(infoware_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/infoware -f Makefile config=$(infoware_config)
endif

curl: zlib mbedtls
ifneq (,$(curl_config))
	@echo "==== Building curl ($(curl_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/curl -f Makefile config=$(curl_config)
endif

cpr: curl
ifneq (,$(cpr_config))
	@echo "==== Building cpr ($(cpr_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/cpr -f Makefile config=$(cpr_config)
endif

mbedtls:
ifneq (,$(mbedtls_config))
	@echo "==== Building mbedtls ($(mbedtls_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/mbedtls -f Makefile config=$(mbedtls_config)
endif

zlib:
ifneq (,$(zlib_config))
	@echo "==== Building zlib ($(zlib_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/zlib -f Makefile config=$(zlib_config)
endif

catch2:
ifneq (,$(catch2_config))
	@echo "==== Building catch2 ($(catch2_config)) ===="
	@${MAKE} --no-print-directory -C Dependencies/catch2 -f Makefile config=$(catch2_config)
endif

Enigma: glfw glad imgui spdlog pfd stb_image cxxopts cryptopp inih json sqlitecpp cpr curl tabulate infoware zlib mbedtls catch2
ifneq (,$(Enigma_config))
	@echo "==== Building Enigma ($(Enigma_config)) ===="
	@${MAKE} --no-print-directory -C . -f Enigma.make config=$(Enigma_config)
endif

clean:
	@${MAKE} --no-print-directory -C Dependencies/glfw -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/glad -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/imgui -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/spdlog -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/pfd -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/stb_image -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/cryptopp -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/cxxopts -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/inih -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/json -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/sqlitecpp -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/tabulate -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/infoware -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/curl -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/cpr -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/mbedtls -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/zlib -f Makefile clean
	@${MAKE} --no-print-directory -C Dependencies/catch2 -f Makefile clean
	@${MAKE} --no-print-directory -C . -f Enigma.make clean

help:
	@echo "Usage: make [config=name] [target]"
	@echo ""
	@echo "CONFIGURATIONS:"
	@echo "  debug"
	@echo "  release"
	@echo "  dist"
	@echo ""
	@echo "TARGETS:"
	@echo "   all (default)"
	@echo "   clean"
	@echo "   glfw"
	@echo "   glad"
	@echo "   imgui"
	@echo "   spdlog"
	@echo "   pfd"
	@echo "   stb_image"
	@echo "   cryptopp"
	@echo "   cxxopts"
	@echo "   inih"
	@echo "   json"
	@echo "   sqlitecpp"
	@echo "   tabulate"
	@echo "   infoware"
	@echo "   curl"
	@echo "   cpr"
	@echo "   mbedtls"
	@echo "   zlib"
	@echo "   catch2"
	@echo "   Enigma"
	@echo ""
	@echo "For more information, see https://github.com/premake/premake-core/wiki"