# Encrypting & Decrypting
	* Raw Text:
	- When encrypting a raw text, cipher is encoded to Base64 to make it readable and copyable to user.
	- When decrypting a raw text, Base64 text is decoded to cipher, then its decrypted to recovered text.
	* Binary:
	- infile can be either encrypted file to be recovered, or a new file to be encrypted
	- outfile can be either encrypted file or recovered file.
	- When encrypting a file, cipher is outputed in binary to the outfile specified by the user without any encoding.
	- When decrypting a file, recovered binary is outputed to outfile specified by the user.

# Crypto++ Important Usage Notes:
	 - If a constructor for A takes a pointer to an object B (except primitive types such as int and char),
	 then A owns B and will delete B at A's destruction. If a constructor for A takes a reference to an object B,
	 then the caller retains ownership of B and should not destroy it until A no longer needs it.

	 - Crypto++ is thread safe at the class level. This means you can use Crypto++ safely in a multithreaded
	 application, but you must provide synchronization when multiple threads access a common Crypto++ object.

# AES-GCM/EAX does not require that the data be padded out to a specific block size, reducing the need to use the padding mechanism provided by RTP. It is RECOMMENDED that the RTP padding mechanism not be used unless it is necessary to disguise the length of the underlying Plaintext.

# Compression  https://security.stackexchange.com/questions/19969/encryption-and-compression-of-data
	 - You should compress before encrypting. Encryption turns your data into high-entropy data, 
	 usually indistinguishable from a random stream. Compression relies on patterns in order to gain 
	 any size reduction. Since encryption destroys such patterns, the compression algorithm would be
	 unable to give you much (if any) reduction in size if you apply it to encrypted data.
	- Enigma performs encrypt/decrypt text with compression by default.


# RAMInfo GetProccessUsedRAM may return value other than task manager value in windows, https://stackoverflow.com/questions/42986220/current-memory-usage-display-is-always-14mb-more-than-task-manager
the workingsetsize is correct (Shared DLLS don't get loaded into every process space. They get mapped in. That's the difference you're seeing). task manager is not a debugging tool.

# Using GCM Auth Mode for Ciphers with 16bytes blocksize, if not so, we're using EAX Auth mode.



# On new Algorithm added, make sure:
- add it to Type enum
- add it to Algorithm::AlgoEnumToStr
- add to Algorithm::CreateFromName
- add to README.md
- make tests